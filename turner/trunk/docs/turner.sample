#
# Sample Turner script
#
# $Id$
#

#
# Q: We only match on mail headers, right? Or mail body content as well?
#

#
# First we should specify where contacts are located
#
# Q: Perhaps in a turner { } block?  Although that actually should imply
# settings for Turner, but these need to be made in .turnerrc.
#
# A: I think that's a bad idea for two reasons:
# 1 - The file will get very indented without good reason, since 99% or so
#      of it will be inside the { } block.
# 2 - We don't have the contacts in some contacts { } block either, do we?
#

#
# NOTE:
# We should make a distinction between incoming and outgoing mails from the
# user. This can be done with a switch to turner, or perhaps calling the
# binary a different name or something.  It doesn't matter, as long as turner
# knows in which mode it is.
#

#
# We really need a way to invoke external programs (optionally piping the mail
# to the program, but an empty stdin must be possible too), and we also must
# find a way to /optionally/ use that output as the new mail (filtering).
#
# XXX: Perhaps we even need to do things based on exit code??
#
# XXX: We should also consider how we implement groups, once we're done with
#      this.
#
# XXX: In the rule-block below, where do we allow for send and recv mode
#      control options?
#
rule {
	#
	# First, we can define some patterns that should be matched
	# Every match-block should be matched in order to proceed with the
	# script.
	#
	# A `match' is matched when any of the pattern-declarations in it are
	# matched in the input mail headers.
	#
	match {
		#
		# Specify what from should contain in order to match.
		#
		# Q: How can we specify "homer:work, but no-one else"? :}
		#
		from = homer:work		# Either homer's work account..
		     | marge:*			# any address of marge..
		     | "someone@else\.com";	# or a regular expression

		# The match is also valid if X-Custom is set to `foo'
		header "X-Custom" = "foo";

		#
		# Q: This just slipped into my mind.  Should we allow for
		#    such "high-level" constructs?
		#
		num_addressees >= 5;
	}

	match {
		# Another match that should be passed
		to = bart:*;		# Mail sent to any address of bart

		#
		# Note that the line below is invalid if the
		# allow_implicit_primary option is set to `no'
		# (which is the default, if not set):
		#
		cc = maggy;		# Invalid, user may intend maggy:*
		cc = maggy:primary;	# Valid alternative
	}
	
	#
	# Q: Psycological issue: consider this:
	#           match { to = bart:*; }
	#    What we mean by that is: the To-field *contains* any address of
	#    Bart.  Will the =-operator not false imply an equality relation,
	#    instead of a "containment"?
	#    ``Confusion is drawing near...  I can feel it.''
	#

	#
	# XXX: The name ``begin'' is very general.  We could be much more
	# specific and call ``the animal by its name'', for example, by calling
	# it: execute, batch, perform, run, action, etc.
	# (I changed it to ``perform'', which I like best.  Agree on it, or
	# should we consider another name?)
	#
	perform {
		#
		# I still favor the short syntax used before.  It's much more
		# in Unix-style, like the rest of our program will be.  Why use
		# the Mickey Mouse names "exec" when a simple "!" fits?
		#
		# However, torn as always between academics and insolent,
		# practical hacking, I like the "clear" declarative style also.
		#
		# Therefore, this is my suggestion:  We allow for an option
		# allow_short_script_cmds (``yes'' per default) that, for
		# example, allows "exec" to be written for short using the "!"
		# notation.  (Just for good ol' Unix-convenience.)
		#

		# Execute a command, no stdin, stdout is ignored.
		exec /usr/local/bin/beep
		! /usr/local/bin/beep

		# Execute a command, stdin is the mail, stdout is ignored.
		pipe /usr/bin/mail -s "..."
		< /usr/bin/mail -s "..."

		# Filter the mail through an external program, stdin is the
		# mail, the mail body is replaced by stdout
		filter /usr/bin/remove-pink-color-tags
		| /usr/bin/remove-pink-color-tags

		# Write to the mailbox
		store incoming/kids
		> incoming/kids
	}
}
