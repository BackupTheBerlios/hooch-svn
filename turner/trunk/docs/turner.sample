#
# Sample Turner script
#
# $Id$
#

#
# First we should specify where contacts are located
#
# Q: Perhaps in a turner { } block?  Although that actually should imply
# settings for Turner, but these need to be made in .turnerrc.
#
# A: I think that's a bad idea for two reasons:
# 1 - The file will get very indented without good reason, since 99% or so
#      of it will be inside the { } block.
# 2 - We don't have the contacts in some contacts { } block either, do we?
#

#
# NOTE:
# We should make a distinction between incoming and outgoing mails from the
# user. This can be done with a switch to turner, or perhaps calling the
# binary a different name or something.  It doesn't matter, as long as turner
# knows in which mode it is.
#

#
# We really need a way to invoke external programs (optionally piping the mail
# to the program, but an empty stdin must be possible too), and we also must
# find a way to /optionally/ use that output as the new mail (filtering).
#
# XXX: Perhaps we even need to do things based on exit code??
#

#
# But of course, we can do this only if we actually allow turner options
#  in this rules file as well...  This might be a good reason to allow it,
#  come to think of it.  On the other hand, we could also allow send/recv
#  blocks in a separate `.turnerrc' and allow only rules in this file.
# That might be cleaner, unless there simply are only a handful of options
#  for Turner at all.  It is rather silly to have a .turnerrc contain only
#  one line ;)  (but very academical, though, since this rule file can be
#  re-used for other programs as it would contain no Turner-specific things)
#
rule {
	#
	# First, we can define some patterns that should be matched.
	# Every match-block should be matched in order to proceed with the
	# script.  (implicit AND between matches)
	#
	# A `match' is matched when any of the pattern-declarations in it are
	# matched in the input mail headers.  (implicit OR within matches)
	#
	match {
# XXX BEGIN ACCEPTED

		#
		# marge:foo is implicitly interpreted as marge:foo.address
		# marge is implicitly interpreted as marge:primary.address,
		# but only if the option allow_implicit_primary is `yes'.
		#

		recv {
			maildir = "~/Mail/inbox";
			# ... other options ...
		}
		send {
			#
			# How to know if this is a user variable or a Turner program setting?
			#

			settings {
				allow_implict_meuk...
			}
			maildir = "~/Mail/outbox";
			# ... other options ...
		}
		# On usage, type ${maildir}

		to contains homer:work;
		to only contains homer:work;	# ``only'' is a keyword that
						# can be prefixed to
						# ``contains'' only

		to contains any of homer:work, smithers:work;
		to contains all of homer:work, smithers:work;

		to contains co-workers;		# is the same as:
		to contains any of co-workers;

		to only contains co-workers;	# is the same as:
		to only contains any of co-workers;

		# No shorter ways to express these:
		to contains all of friends;
		to only contains all of friends;

		# to does not contain any of friends;		# Same as:
		to contains none of friends;

		# We do NOT accept
		# to only contains none of friends;
		#
		# since it is undefined what that should be (both
		# mathematically and naturally)

		#
		# Suppose we have a contact:
		#
		# contact vincent {
		#	address = "nvie@nvie.com";
		# }
		# Then we have the following expansion:
		#
		# to contains vincent => to contains "^nvie@nvie\.com$"
		# to matches vincent => to matches "^nvie@nvie\.com$"
		#
		# That's why this also vurks:
		#
		to contains "@netbsd\.org$";

		to does not contain all of friends;
		to does not only contain any of friends;

		# This would be exactly opposite of what one would expect in
		# natural language.
		to does not only contain all friends;

		# Forget `does not'!
		# Here's why:
		# Natural language would mean ``contains all friends, and some more''
		to does not only contain all friends;

		# What Turner would think is ``contains not exactly friends''

		# XXX [any-]header? body? mail? both?

		# These are the defaults for all matches
		body contains "foobar" insensitive greedy single;	# Also matches FOOBAR

		# Interpret x-custom as a to-like field, making a list of e-mail addresses:
		"x-custom" contains marge:primary, homer:work;

		# Just grep the raw text after the semi-colon of x-custom
		"x-custom2" matches marge:foo;
}

#
# This is a rule with fallthrough (default is stop):
#
non-terminal rule { ... }		# One may explicitly use `terminal rule { .. }'

# XXX END ACCEPTED

		#
		# Q: This just slipped into my mind.  Should we allow for
		#    such "high-level" constructs?
		#
		num_addressees >= 5;
		#
		# A: I don't like it a bit, but it's way cleaner to use this
		#     than to do a regex-match on the number of @-signs in a
		#    from/to line, like I do in my .procmailrc. :-(
		#    I would really like a different notation though.
		#
		#    Something along the lines of `{3,5}*'   but the problem
		#     here is that this would allow only 3 to 5 addresses
		#     from the /contact list/... We need to be able to count
		#     just the number of addresses, including those not in
		#     the list.
		#
		# I suggest to define macro's, so we could say stuff like:
		#
		count(to) < 3;
		count(to) >= 5;
		#
		# But, I seriously make a point of it now that we need to
		# watch ourselves putting in this kind of feature creep,
		# especially because it does not share syntax with the
		# rest of the file, and we might get tremendous parsing
		# problems.
		#
		# The macros thing is an alright idea.  Perhaps we could
		# find something more elegant, but let's keep this in mind.
		#
		# Variables?
	}

	act {
		#
		# Every command in an act-block is executed in the order they
		# are stated.  Every command is of the following form:
		cmd "command(s) in shell syntax";
		# or
		cmd 'command(s) in shell syntax';

		#
		# Possible cmd-identifiers:
		#
		# !	Execute a command, no stdin, stdout is ignored.
		# <	Execute a command, stdin is the mail, mail gets
		# 	replaced by stdout.
		# |	Execute a command, stdin is the mail, stdout ignored.
		# >	Store the mail to the given mailbox.
		#
		# Some examples:
		! "beep";		# The PATH is searched for ``beep''
		| "mail -s \"Here's a mail\"";
		< "/usr/bin/remove-pink-color-tags";
		> "incoming/kids";

		#
		# This can be useful when dealing with commands that contain
		# quotes.  Like in many programs, you need to escape quotes
		# used in strings somehow.  Because we make no difference *at
		# all* between these three types of strings, this leaves the
		# user with the possibility of easy escaping strings.  Examples:
		#
		| "/usr/bin/mail -s \"Here's a mail\"";
		| '/usr/bin/mail -s "Here\'s a mail"';
		| "/usr/bin/mail -s 'Here\'s a mail'";
		| `/usr/bin/mail -s "Here's a mail"`;
		#
		# NOTE: The backtick can still be used in the shell line:
		#
		< 'sed -E "s/Subject: .*/Subject: `date` \1/"';
		#
		# Will put today's date in the Subject line.
		#

		# XXX: RANS:
		# Mind the subtle difference in the \'s-part of the two strings
		# above!  In the first case, the ' is escaped, meaning that the
		# single quote is just passed to the shell (w/o backslash).  In
		# the latter case the \ represents a regular \, since it is not
		# directly followed by a valid special character (only " would
		# be in this case).  Therefore, the backslash is passed along
		# with the string and is necessary for the shell to be
		# interpreted correctly.
		#
		# <sjamaan>
		# Should we really do it that way? In the shell, a \ just means
		# `insert the next character, without regards to the special
		#  meaning of it'.  In C, it does the same, but while compiling
		#  we get a warning "unknown escape sequence \y".
		#
		# So I vote for the shell-way, and inserting a literal \ always
		#  with \\.  No context-sensitive behaviour, that will
		#  inevitably confuse people.
		#
		# NOTE:
		# We both voted for the shell way, so that is how it shall be.
		#

		# Strings may be spread across lines, in standard C-fashion:
		! "/usr/local/bin/b"
			"e"
		    "e"
		    			   "p";
		! '/usr/bin/mail -s "Some very long subject'
			'that needs at least two lines"';

		# Because all of this is executed by the shell, it is allowed to
		# specify multiple commands in a chain:
		< "sort | head -n 50";
	}
}
