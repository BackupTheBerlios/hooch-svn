#
# Sample Turner/Hooch address book
#
# $Id$
#

#
# Multiple identities per contact are possible, by defining id-blocks for a contact.
#
contact homer {
	address = "homer@simpsons.net";
	pgp.key_id = empty;

	id work {
		address = "homer@powerplant.net";
		pgp.key_id = "0xBABE2ADE5BED";
	}
}

#
# Every declaration should either be of the form x { stuff here } or x = foo;
# A block declaration like x { } should never be followed by a semi-colon.
#

#
# Now we can access homer's work address with `homer:work'
# Specifying a contact's specific e-mail address in a group can be also done easily now:
#
group employees { contacts = homer:work, smithers; }

#
# We might even get rid of the annoying notation that links addresses to pgp
# keys by grouping them together under a different identity:
#
contact homer {
	address = "homer@simpsons.net";			# Main address
	pgp.key_id = 0xabcdef;				# With PGP key
	id work {
		address = "homer@powerplant.net";	# Work address
		#
		# We need to explicitly set this to empty, because
		# the settings from the main ID are cascaded over into
		# the id things.
		#
		pgp.key_id = empty;			# empty sets the item
							# to be undefined
	}
}

##########
# Groups #
##########

# Groups are defined like this:
group parents {
	contacts = marge, homer;
	option1 = y;
	option2 = foo;
}

#
# If after reading and parsing all config files there are still contacts in a
# `contacts' field of a group which do not exist, we get an error.  It is legal
# to forward-reference the contacts in a group.
#

#
# Note that there may not be a contact with the same name as a group, or else
# we get an error.  This is the desired effect, since the user can now type a
# mail, and on the `To:' line type the name of either a group or a contact and
# get an unambiguous expansion.
#

#
# We allow the exact same options for groups as for contacts, to provide
# group-wide defaults for all contacts.  When addressing the group, the
# group settings will have effect, but when addressing the contact directly,
# the contact's settings have effect.
#

#
# Subsystems/extensions can be handled with ease.  They simply register which
# lines (under which blocks (so register "pgp.key_id", "pgp.sign" etc) they
# understand and the type of these fields.  Perhaps even new toplevel blocks
# (say `gui' or something)
# This way we can error immediately on keywords we don't understand.
#
contact burns {
	name = "Mr. Burns";
	address = "burns@powerplant.net";

	# Picture plugin/GUI which optionally shows photos of your contacts
	picture = "~/pics/ugly_mug.png";

	# More elaborate plugins can be passed a structure with many fields
	pgp {
		key_id = "0x1029384756";# Number or string? (Hex! what if no 0x)
		encrypt = yes;		# bool.  true/false also accepted
		sign = yes;
	}

	#
	# One can refer to structures or contacts with dot notation,
	# for example suppose we only want to specify a key id, and rely
	# on sane defaults for the rest of the PGP subsystem:
	#
	pgp.key_id = "1029384756";

	# Of course, this idea can (and should, for intuity/consistency
	# reasons) be extended.  For example, we could use burns.address
	# if we want to refer to the address field of the contact or group
	# called `burns' in any other place of the program.  (and so on)
}
